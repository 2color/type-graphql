<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://typegraphql.com/blog</id>
    <title>TypeGraphQL Blog</title>
    <updated>2018-03-25T06:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://typegraphql.com/blog"/>
    <subtitle>The best place to stay up-to-date with the latest TypeGraphQL news and events.</subtitle>
    <logo>https://typegraphql.com/img/logo.png</logo>
    <rights>Copyright © 2020 Michał Lytek</rights>
    <entry>
        <title type="html"><![CDATA[GraphQL + TypeScript = TypeGraphQL]]></title>
        <id>https://typegraphql.com/blog/2018/03/25/medium-article.html</id>
        <link href="https://typegraphql.com/blog/2018/03/25/medium-article.html"/>
        <updated>2018-03-25T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>We all love GraphQL! It’s so great and solves many problems that we have with REST API, like overfetching and underfetching. But developing a GraphQL API in Node.js with TypeScript is sometimes a bit of pain.</p>
<p><strong>TypeGraphQL</strong> makes that process enjoyable, i.a. by defining the schema using only classes and a bit of decorators magic.</p>
]]></summary>
        <author>
            <name>Michał Lytek</name>
            <email/>
            <uri>https://github.com/MichalLytek</uri>
        </author>
    </entry>
</feed>